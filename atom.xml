<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://aturx.github.io/</id>
    <title>链 求 君</title>
    <updated>2020-05-12T06:57:32.754Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://aturx.github.io/"/>
    <link rel="self" href="https://aturx.github.io/atom.xml"/>
    <subtitle>AturX  的个人网站</subtitle>
    <logo>https://aturx.github.io/images/avatar.png</logo>
    <icon>https://aturx.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 链 求 君</rights>
    <entry>
        <title type="html"><![CDATA[Python 高阶函数及使用场景]]></title>
        <id>https://aturx.github.io/post/python-gao-jie-han-shu-ji-shi-yong-chang-jing</id>
        <link href="https://aturx.github.io/post/python-gao-jie-han-shu-ji-shi-yong-chang-jing">
        </link>
        <updated>2020-05-12T06:56:48.000Z</updated>
        <content type="html"><![CDATA[<p>Python有一些高阶函数，能够非常容易的解决一些比较特殊的场景问题。常用的几个函数如下所示。</p>
<h2 id="1-map">1. map</h2>
<p>场景一：</p>
<pre><code>有一批值或者数据，需要重复的执行同一个逻辑过程。用map函数把list中所有数字转为字符串：
&gt;&gt;&gt; list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
['1', '2', '3', '4', '5', '6', '7', '8', '9']


实例场景：有一批用户名数据，现要求根据用户名，生成随机密码，给每个用户分配一个密码。
</code></pre>
<p>代码演示：</p>
<pre><code># user = [&quot;xxxx&quot;,&quot;&quot;]
def gen_password(user):
    from random import randint
    # 生成随机密码
    str_password = &quot;&quot;
    str_str = &quot;abcdefghij&quot;
    for i in range(8):
        num = randint(0, 9)
        str_password = str_password + str_str[num]

    password = str_password + user[0] + str_password    # 用用户名拼接一个密码
    user[1] = password
    print(&quot;用户生成的随机信息是: {}&quot;.format(user))
    return user

def demo1():
    # 场景一： 密码生成
    users_data = [
        [&quot;admin&quot;, &quot;&quot;],
        [&quot;userone&quot;, &quot;&quot;],
        [&quot;aturx&quot;, &quot;&quot;],
        [&quot;lisiyi&quot;, &quot;&quot;],
        [&quot;whoareyou&quot;, &quot;&quot;]
    ]

    result = map(gen_password, users_data)
    print(list(result))


demo1()
</code></pre>
<h2 id="2-reduce">2. reduce</h2>
<p>场景二：</p>
<pre><code>reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，
reduce把结果继续和序列的下一个元素做计算，其效果就是：

reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

实例场景：现有一个软件系统一年内每个月利润值，想要统计全年总利润。
</code></pre>
<p>代码演示：</p>
<pre><code>
def new_add_user(before, now):
    new_add = now + before
    return new_add


def demo2():
    # 场景二： 累计统计
    data = [
        1000, 1300, 1500, 4572,
        1976, 2230, 1212, 2222,
        1567, 2621, 3000, 2320
    ]
    from functools import reduce
    all = reduce(new_add_user, data)

    print(all)

demo2()
</code></pre>
<h2 id="3-filter">3. filter</h2>
<p>场景三：</p>
<pre><code>Python内建的filter()函数用于过滤序列。
和map()类似，filter()也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。


实例场景：某系统有大量注册用户，先需要在一批注册用户中，找到年龄为40岁以上的男性用户。该场景非常适合使用过滤器。 
</code></pre>
<p>代码演示：</p>
<pre><code>
def is_man(user):
    # 过滤40岁以上男性
    if user[0] == &quot;man&quot; and user[1] &gt; 40:
        return True
    else:
        return False

def demo3():
    # 场景三： 过滤特定数据
    data = [
        [&quot;man&quot;, 30],
        [&quot;woman&quot;, 22],
        [&quot;woman&quot;, 22],
        [&quot;man&quot;, 42],
        [&quot;woman&quot;, 22],
        [&quot;man&quot;, 52],
        [&quot;woman&quot;, 22],
        [&quot;man&quot;, 12],
        [&quot;woman&quot;, 62],
        [&quot;man&quot;, 48],
        [&quot;man&quot;, 62],
        [&quot;woman&quot;, 22],
        [&quot;man&quot;, 39],
        [&quot;woman&quot;, 22],
    ]
    result_data = filter(is_man, data)
    print(list(result_data))

demo3()
</code></pre>
<h2 id="4-sorted">4. sorted</h2>
<p>场景四：</p>
<pre><code>排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，但如果是字符串或者两个dict呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。

sorted()函数是一个高阶函数，它还可以接收一个key函数来实现自定义的排序。

实例场景： 现有一个班级学生的考试成绩单，先需要分别根据数学成绩排名（100分制）、英语成绩（ABCD制）排名。该场景适合自定义排序。
</code></pre>
<p>代码演示:</p>
<pre><code>def get_m_sort(student):
    # 返回数学分值
    return student[1]

def get_e_sort(student):
    # 返回英语分值
    return student[2]

def sorted_by_math(students):
    result = sorted(students, key=get_m_sort, reverse=True)  # 数字降序排列
    return result

def sorted_by_english(students):
    result = sorted(students, key=get_e_sort)
    return  result

def demo4():
    # 名字， 数学成绩， 英语成绩
    students = [
        [&quot;people1&quot;, 99, &quot;C&quot;],
        [&quot;people2&quot;, 78, &quot;B&quot;],
        [&quot;people3&quot;, 85, &quot;B&quot;],
        [&quot;people4&quot;, 63, &quot;F&quot;],
        [&quot;people5&quot;, 79, &quot;C&quot;],
        [&quot;people6&quot;, 68, &quot;D&quot;],
        [&quot;people7&quot;, 53, &quot;A&quot;],
    ]

    order_by_math = sorted_by_math(students)

    order_by_english = sorted_by_english(students)

    print(&quot;数学排名: &quot;, order_by_math)
    print(&quot;*&quot; * 10)
    print(&quot;英语排名: &quot;, order_by_english)

demo4()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[比特币基础知识]]></title>
        <id>https://aturx.github.io/post/bi-te-bi-ji-chu-zhi-shi</id>
        <link href="https://aturx.github.io/post/bi-te-bi-ji-chu-zhi-shi">
        </link>
        <updated>2020-05-11T07:47:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是比特币">什么是比特币？</h1>
<p>比特币是2009年1月创建的一种数字货币。它实现了一位神秘人物中本聪（Satoshi Nakamoto）在白皮书中提出的想法，其真实身份尚未得到验证。比特币有望提供比传统在线支付机制更低的交易费用，并且与政府发行的货币不同，它由一个去中心的机制运行。</p>
<p>比特币并不是物理存在的，只是被保存在公共的分布式账本中，并且与所有比特币交易记录在一起，通过大量的计算进行验证。比特币不是由任何银行或政府发行或支持的，单个比特币也不是有价值的商品。尽管它不是法定货币，但比特币仍然受欢迎，并引发了数百种其他虚拟货币的发行，这些虚拟货币统称为“山寨币”。</p>
<pre><code>重要要点:

- 按市值计算，比特币于2009年推出，是世界上最大的加密货币。
- 与法定货币不同，比特币是通过使用称为区块链的去中心化分布式系统来创建，分配，交易和存储的。
- 比特币作为价值存储并不稳定，一直处于动荡不定的状态。2017年，加密货币的价格飙升至每枚硬币约20,000美元，但截至两年后，其货币交易量不到其中的一半。
- 作为最为广泛流行和成功的最早的加密货币，比特币启发了许多分支和模仿者。
</code></pre>
<h1 id="了解比特币">了解比特币</h1>
<p>比特币是一种加密货币。比特币数值的余额使用公共地址和私有“密钥”来保存，这是通过数学加密的长串数字和字母构成的。公钥（相当于银行帐号）用作发布给全世界的地址，其他人可以将他的比特币发送到该地址。私钥（与ATM PIN相对应）是受保护的密码，仅用于授权比特币传输。比特币密钥不应与比特币钱包混淆，后者是一种物理或数字设备，可促进比特币交易并允许用户跟踪硬币的所有权。术语“钱包”有点误导，因为比特币的去中心化性质意味着它永远不会存储在钱包中，而是分散地存储在区块链中。</p>
<p>风格注释：根据官方比特币基金会的说法，“比特币”一词在提及实体或概念时大写，而“比特币”在指代某种货币时用小写（例如，我购买了20个btc）或单位本身，比特币通常也缩写为“BTC”。</p>
<h1 id="比特币如何运作">比特币如何运作</h1>
<p>比特币是最早使用点对点技术促进即时付款的数字货币之一。拥有主导计算能力并参与比特币网络的独立个人和公司，也称为“矿工”，其主要动机是比特币奖励（释放新的比特币）和以比特币支付的交易费。这些矿工可以被视为强化比特币网络的信任机制。新的比特币将以固定的价格发布给矿工，但比特币的周期性奖励减半，使得比特币的总供应量接近2100万。目前，大约有300万比特币尚未开采。这样，比特币（以及通过类似过程生成的任何加密货币）的运行方式就不同于法定货币货币；在中心化的银行系统中，货币以与商品增长相匹配的速率释放，以维持价格稳定，而像比特币这样的去中心系统则根据算法预先设置释放率。</p>
<p>比特币挖矿是比特币发行流通的过程。通常，挖掘需要解决计算难题，以便发现新的区块，将其添加到区块链中。在为区块链做贡献的同时，挖矿还会在整个网络中添加和验证交易记录。如果成功向区块链中添加了新的区块，该矿工将会获得了一些比特币的奖励；每产生210,000个区块奖励会减少一半。在2009年，区块奖励是50个新的比特币，目前为12.5。随着越来越多的比特币被创建，挖掘过程的难度（即所涉及的计算能力）增加了。挖矿难度始于2009年比特币首次亮相时的1.0；到年底，只有1.18。截至2019年10月，采矿难度超过12万亿。曾经，一台普通的台式计算机足以满足采矿过程的需要；现在，为了克服难度，矿工必须使用昂贵的硬件，例如专用集成电路（ASIC）和更高级的处理单元，例如图形处理单元（GPU）。这些精心制作的挖矿处理器被称为“矿机”。</p>
<p>一个比特币可整除到小数点后八位（一个比特币的百万分之一），而这个最小的单位称为“聪”。如果有必要，并且如果参与的矿工接受更改，则最终可以将比特币整除为甚至更多的小数位。</p>
<h1 id="比特币的价格变化">比特币的价格变化</h1>
<p>仅在2017年，比特币的价格就从年初的不到1000美元上涨到接近19000美元，到年末上涨了1400％以上。最近，加密货币的价值已经下降并且或多或少处于稳定状态，除了一些相对较低的价格数据（2019年初，价格徘徊在3500美元左右）和相对较高的价格（2019年6月和7月），当时价格一度达到13,000美元以上的峰值）。截至2019年10月，比特币似乎稳定在了一个新的价格点，范围在8,000美元至9,000美元之间。</p>
<p>比特币的价格在很大程度上取决于其采矿网络的规模，因为网络规模越大，生产新比特币就越困难-因此成本也更高。结果，随着其生产成本的上升，比特币的价格也不得不上涨。比特币采矿网络的总处理能力称为“哈希率”，是指在将区块添加到区块链之前，网络每秒可以尝试完成必要的哈希难题的次数。截至2019年10月23日，该网络每秒达到114亿个哈希的创纪录新高。</p>
<h1 id="比特币的开端">比特币的开端</h1>
<ul>
<li>
<p>2008年8月18日：域名<code>bitcoin.org</code>已被注册。至少到今天，该域名的主人的身份仍不是公共信息。</p>
</li>
<li>
<p>2008年10月31日：有人使用中本聪（Satoshi Nakamoto）的名字在metzdowd.com上的“密码学邮件”列表中宣布：“我一直在研究一种完全对等，没有可信任第三方的新型电子现金系统该文件可从  http://www.bitcoin.org/bitcoin.pdf 获得。” 该链接指向在bitcoin.org上发布的著名白皮书，标题为“ Bitcoin：P2P电子现金系统”。本文将成为当今比特币运作方式的“大宪章”。</p>
</li>
<li>
<p>2009年1月3日：开采了第一个比特币区块，即区块0。这也被称为“创世区块”，其中包含以下文字：“泰晤士报2009年1月3日 总理正处于对银行的第二轮纾困之际”，这也许是为了作为该区块是在该日期被开采的证据，也可能单纯的政治评论。</p>
</li>
<li>
<p>2009年1月8日：加密邮件列表中宣布了比特币软件的第一个版本。</p>
</li>
<li>
<p>2009年1月9日：第1区块被开采，比特币正式的开采开始了。</p>
</li>
</ul>
<h1 id="谁发明了比特币">谁发明了比特币？</h1>
<p>没有人知道谁发明了比特币，或者至少不是结论性的。中本聪（Satoshi Nakamoto）是与在2008年发布原始比特币白皮书并致力于2009年发行的原始比特币软件的个人或组织相关的名称。比特币协议要求用户在注册时输入生日，我们知道中本聪（Satoshi Nakamoto）的个人注册并记下4月5日为生日。自那时以来的几年中，出现许多人冒充者，欺世盗名之徒，但截至2020年5月，中本聪背后的真实身份仍然被掩盖而无法确认。</p>
<h1 id="中本聪之前">中本聪之前</h1>
<p>尽管人们很容易相信媒体的说法，认为中本聪是一个孤独的天才，他凭空创造了比特币，但这种创新通常不会在真的凭空被创造。所有主要的科学发现，无论是多么原始的发现，都是建立在先前已有的研究之上。比特币的先驱是：亚当·巴克（Adam Back）于1997年发明的Hashcash，随后是戴维（Wei Dai）的b-money，尼克·萨博（Nick Szabo）的比特黄金和哈尔·芬尼（Hal Finney）的可重复使用工作量证明。比特币白皮书本身引用了Hashcash和b-money，以及涉及多个研究领域的其他各种著作。这不足为奇，上面提到的其他项目背后的许多人被推测也参与了比特币的创建。</p>
<h1 id="为什么中本聪要匿名">为什么中本聪要匿名？</h1>
<p>比特币发明人对其身份保持保密的主要动机有两个。</p>
<p>一种是隐私。随着比特币的流行（成为一种全球现象），中本聪（Satoshi Nakamoto）可能会引起媒体和政府的广泛关注。</p>
<p>另一个原因是安全性。仅2009年一年，就开采了32,489个区块。以当时每块50 BTC的回报率，2009年的总支出为1,624,500 BTC，截至2019年10月25日，价值为139亿美元。所以可能得出结论，到2009年，中本聪和其他一些早期参与者，他们拥有大量的BTC。拥有这么多比特币的人可能会成为犯罪分子的目标，尤其是因为比特币不像股票，而更像现金，可以打印出授权支出所需的私钥，并将其字面上保存在床垫下。虽然比特币的发明者可能会采取预防措施以使任何敲诈勒索引起的转移都可追溯，但保持匿名是中本聪限制暴露的好方法。</p>
<h1 id="谁是中本聪">谁是中本聪？</h1>
<p>主要媒体，加密货币专家和其他狂热者对中本聪（Satoshi Nakamoto）角色背后的个人或组织进行了猜测。2011年10月10日，《纽约客》 发表了一篇文章，推测中本聪可能是爱尔兰密码学学生迈克尔·克莱尔（Michael Clear）或经济社会学家维利·莱顿维尔塔（Vili Lehdonvirta）。<br>
Fast Company认为中本聪可能是由三个人组成的小组，小组成员是-Neal King，Vladimir Oksman和Charles Bry，他们一起出现在与<code>bitcoin.org</code>注册有关的安全通信相关专利中。2013年5月发表的一篇文章将更多嫌疑人添加到了名单中，其中包括比特币项目的主要开发人员Gavin Andresen；现已解散的比特币交易所Mt.的联合创始人Jed McCaleb x; 以及著名的日本数学家望月新一（Shinichi Mochizuki）。</p>
<p>2013年12月，Techcrunch发表了对研究员Skye Gray的采访，后者声称对发表的著作进行了文字分析，显示中本聪与比特现金的创作者Nick Szabo之间的联系。在2014年3月，《新闻周刊》刊登了一篇封面文章，声称中本聪实际上是一个名叫中本聪的人，中本聪是现居加利福尼亚的64岁的日裔美国工程师。之后，澳大利亚计算机科学家和加密货币支持者克雷格·赖特（Craig Wright）声称自己是中本聪（Satoshi Nakamoto），他也是后面官司不断的“澳本聪”。</p>
<p>在比特币十多年之后，世界仍然不知道谁是世界顶级数字货币的背后人物，而且这个谜团可能永远无法解决。</p>
<h1 id="可以证明中本聪的身份吗">可以证明中本聪的身份吗？</h1>
<p>似乎甚至早期的项目合作者都没有可验证“中本聪”真实身份的证明。为了最终确定中本聪是谁，需要在他/她与比特币的活动与他/她的身份之间建立明确的联系。这可以通过链接bitcoin.org的域名注册来追寻，中本聪使用的电子邮件和论坛帐户或使用拥有最早开采的比特币地址的所有权来证明。尽管“中本聪”拥有的比特币可以在区块链上追踪到，但他/她似乎还没有用以能揭示其身份的方式去兑现这些比特币。如果“中本聪”今天将其比特币转移到交易所，这一定会引起人们的注意，但是资金充裕且成功的交易所似乎不太可能出卖任何客户的隐私。</p>
<h1 id="用比特币作为付款方式">用比特币作为付款方式</h1>
<p>比特币可以作为销售产品或提供的服务的付款方式。如果您有一家实体店，只需显示一个标语“此处接受比特币”，您的许多客户很可能会被吸引过来；交易方式可以通过QR码（二维码）和触摸屏应用程序使用必要的硬件终端或钱包地址进行处理。只需将支付选项添加到它提供的其他选项（例如信用卡，支付宝、微信支付等）中，在线业务就可以轻松接受比特币。</p>
<h1 id="获得比特币报酬的工作">获得比特币报酬的工作</h1>
<p>那些自由职业者可以通过比特币作为工作报酬。有几个专门针对数字货币的网站：</p>
<ul>
<li><a href="https://www.cryptogrind.com/">Cryptogrind</a> 网站汇集了大量求职者和潜在雇主，支持通过比特币结算。</li>
<li><a href="https://freelanceforcoins.com/">freelanceforcoins</a> 用加密货币付费的自由职业 （比特币，以太坊等）</li>
<li><a href="https://ethlance.com">ethlance</a> Ethlance数据库分布在以太坊公共区块链上，源文件位于IPFS上。所有人都可以永远使用Ethlance，而没有任何中央机构对其进行控制。</li>
</ul>
<h1 id="投资比特币">投资比特币</h1>
<p>许多比特币支持者认为数字货币是未来。许多支持比特币的人认为，它为全球交易提供了更快，更免费的支付系统。尽管没有任何政府或中央银行的支持，但比特币可以兑换成传统货币。实际上，其兑美元的汇率吸引了对货币交易感兴趣的潜在投资者和交易员。确实，比特币等数字货币增长的主要原因之一是，它们可以替代国家法定货币和黄金等传统商品。</p>
<p>2014年3月，美国国税局指出，所有虚拟货币（包括比特币）都将作为财产而不是货币征税。作为资本持有的比特币的收益或损失将被实现为资本收益或损失，而作为库存持有的比特币将产生普通的收益或损失。您从另一方开采或购买的比特币的销售，或使用比特币支付商品或服务的费用，都是可以征税的交易案例。</p>
<p>像任何其他资产一样，低买高卖的原理也适用于比特币。积累货币的最流行方法是在比特币交易所购买，但是还有许多其他赚钱和拥有比特币的方法。</p>
<h1 id="比特币投资的风险">比特币投资的风险</h1>
<p>尽管比特币并非被设计为正常的股权投资（没有发行股票），但在2011年5月和2013年11月再次迅速升值后，一些投机者被数字货币吸引。因此，许多人购买比特币来获得其投资价值而不是作为交易的媒介。</p>
<p>但是，它缺乏稳定的价值保证，意味着购买和使用比特币存在若干固有风险。证券交易委员会（SEC），金融业监管局（FINRA），消费者金融保护局（CFPB）和其他机构已经发布了许多投资者警报。</p>
<p>虚拟货币的概念仍然很新颖，与传统投资相比，比特币没有太多的长期追踪记录或可信度的历史。随着比特币的日益普及，比特币每天都变得越来越缺乏实验性。十年后，它们（像所有数字货币一样）仍处于发展阶段，并且一直在不断发展。 建立和投资于比特币和区块链公司的数字货币集团首席执行官巴里·席尔伯特（Barry Silbert）说：“这几乎是您可能做出的最高风险，最高回报的投资。”</p>
<h1 id="比特币监管风险">比特币监管风险</h1>
<p>以多种形式向比特币投资并不是为了规避风险。比特币是政府货币的竞争对手，可用于黑市交易，洗钱，非法活动或逃税。结果，各国政府可能寻求规范，限制或禁止使用和出售比特币，有些已经这样做。其他人提出了各种规则。例如，在2015年，纽约州金融服务部最终确定了法规，该法规要求与比特币的购买，出售，转移或存储打交道的公司必须记录客户的身份，拥有合规官并保持资本储备。价值10,000美元或以上的交易必须进行记录和报告。</p>
<p>由于缺乏有关比特币（和其他虚拟货币）的统一法规，引发了人们对它们的寿命，流动性和普遍性的质疑。</p>
<h1 id="比特币的安全风险">比特币的安全风险</h1>
<p>拥有和使用比特币的大多数个人并非通过“挖矿”获得其代币。相反，他们在称为“比特币交易所”的许多流行在线市场中的任何一个上买卖比特币和其他数字货币。比特币交易所完全是数字化的，并且与任何虚拟系统一样，受到黑客，恶意软件和操作故障的威胁。如果小偷可以访问比特币所有者的计算机硬盘并窃取了他的私有加密密钥，则他可以将被盗的比特币转移到另一个帐户。（只有当比特币存储在未连接到互联网的计算机上，或者选择使用纸钱包时，用户才能阻止此操作–打印出比特币的私钥和地址，而根本解决方案就是不将其保存在计算机上。）黑客还可以将比特币交易作为目标，从而可以访问成千上万的帐户和存储比特币的数字钱包。2014年发生了一起特别臭名昭著的骇客事件，当时 Gox是日本的一家比特币交易所，在价值数百万美元的比特币被盗后，被迫关闭。</p>
<p>你需要记住所有比特币交易都是永久且不可逆的。这就像处理现金一样：使用比特币进行的任何交易只有在收到比特币的人退款后才能撤消。就像借记卡或信用卡一样，没有第三方或付款处理者，因此，如果有问题，就没有办法保护或追溯来源。</p>
<h1 id="保险风险">保险风险</h1>
<p>一些投资是通过证券投资者保护公司进行担保的。正常的银行帐户通过联邦存款保险公司（FDIC）进行最高限额的保险，具体取决于司法管辖区。一般来说，比特币交易所和比特币账户不受任何类型的联邦或政府计划的保险。在2019年，主要交易商和交易平台SFOX宣布将能够为比特币投资者提供FDIC保险，但仅适用于涉及现金的部分交易。</p>
<h1 id="比特币欺诈的风险">比特币欺诈的风险</h1>
<p>比特币使用私钥加密来验证所有者并注册交易，欺诈者和骗子可能会尝试出售虚假的比特币。例如，2013年7月，SEC对与比特币相关的庞氏骗局的运营商提起了法律诉讼。还记录了另一种常见欺诈形式的比特币价格操纵案件。</p>
<h1 id="市场风险">市场风险</h1>
<p>像任何投资一样，比特币价值可能会波动。确实，该货币的价值在其短暂存续期间已经出现了剧烈的价格波动。根据交易所的大量买卖，它对“新闻”具有很高的敏感性。根据CFPB，比特币的价格在2013年单日下跌了61％，而在2014年则是单日价格下跌的记录。高达80％</p>
<p>如果越来越少的人开始接受比特币作为货币，那么这些数字单位可能会失去价值，并变得一文不值。确实，有人猜测，当价格在2017年底和2018年初的加密货币高峰期间从历史最高点下跌时，“比特币泡沫”就破灭了。已经有足够的竞争，尽管比特币在比特币价格上有巨大的领先优势。得益于其品牌知名度和风险投资资金，数以百计的其他数字货币如雨后春笋般涌现，其他更好的虚拟硬币形式的技术突破始终是威胁。</p>
<h1 id="比特币的税收风险">比特币的税收风险</h1>
<p>由于比特币没有资格包含在任何税收优惠的退休账户中，因此没有很好的法律选择来保护投资免税。</p>
<h1 id="比特币的分叉">比特币的分叉</h1>
<p>自比特币推出以来，矿工与开发者之间的分歧引发了无数观点纠纷，引发了加密货币社区的大规模分裂。在某些情况下，一群比特币用户和矿工改变了比特币网络本身的协议。此过程称为“分叉”，通常会导致使用新名称创建新型比特币。这种拆分可能是“硬分叉”，其中新硬币与比特币共享交易历史，直到确定的拆分点为止，在该点上创建了新代币。由于硬分叉而创建的加密货币示例包括Bitcoin Cash（创建于2017年8月），Bitcoin Gold（创建于2017年10月）和Bitcoin SV（创建于2017年11月）。一个“软叉” 是对协议的更改，仍然与以前的系统规则兼容。例如，比特币软叉增加了块的总大小。</p>
<h1 id="相关内容">相关内容</h1>
<p><a href="https://learnblockchain.cn/article/854">什么是数字货币？</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 字符串与编码]]></title>
        <id>https://aturx.github.io/post/python-zi-fu-chuan-yu-bian-ma</id>
        <link href="https://aturx.github.io/post/python-zi-fu-chuan-yu-bian-ma">
        </link>
        <updated>2020-05-09T09:42:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="比特bit">比特（bit）</h1>
<p>计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理，bit是计算机的最小单位。</p>
<h1 id="字节byte">字节（byte）</h1>
<p>最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），一个字节能表示的最大的整数就是255（二进制11111111=十进制255）</p>
<h1 id="ascii-编码">ASCII 编码</h1>
<p>计算机最早发明，通用语言是英语，所以采用127个字符，表示大小写英文字母、数字和一些符号就足够了。这个编码表，就是<code>ASCII</code>编码，比如<code>A</code> 编码是<code>65</code>.<br>
用一个字节（<code>0~255</code>）就能够表示。</p>
<p>但是，对于其国家他语言来说，光常用的中文汉字就几千个，还有其他韩语、日语等等，一个字节（<code>0~255</code>）陷入是不够的，至少两个字节（<code>0~65535</code>），还不能和<code>ASCII</code>编码冲突，中国制定自己的<code>GB2312</code>编码,日文<code>Shift_JIS</code>,韩文<code>Euc-k</code>,各国各自的标准自然会出现冲突，所以多语言混合的内容中，经常会看到乱码出现。</p>
<p>为了解决这个问题，出现了Unicode（万国码）编码。</p>
<h1 id="unicode-编码">Unicode 编码</h1>
<p>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。现代操作系统和大多数编程语言都直接支持Unicode。最常用的是用两个字节（<code>0~65535</code>）表示一个字符（如果要用到非常偏僻的字符，就需要4个字节(<code>0~4294967295</code>)）</p>
<p>乱码问题解决了，但是新的问题是，如果统一采用<code>Unicode</code>编码，存储将会是<code>ASCII</code>编码的至少两倍。</p>
<p>本着节约的精神，又出现了把<code>Unicode</code>编码转化为“可变长编码”的<code>UTF-8</code>编码。</p>
<h1 id="utf-8-编码">UTF-8 编码</h1>
<p>UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。</p>
<p>实际使用时，根据场景决定使用Unicode 还是 UTF-8，计算机内存中，统一使用Unicode编码（统一编码），当需要保存到硬盘或者需要传输的时候（节约空间），就转换为UTF-8编码。</p>
<h1 id="python-字符串">Python 字符串</h1>
<p>在Python 3版本中，把'xxx'和u'xxx'统一成Unicode编码，即写不写前缀u都是一样的。</p>
<p>在Python 3版本中，所有的字符串都是使用Unicode编码的字符串序列。</p>
<p>Python 3最重要的新特性之一是对字符串和二进制数据流做了明确的区分。文本总是 Unicode，由 str 类型表示，二进制数据则由 bytes 类型表示。</p>
<p>Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。</p>
<p>Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：</p>
<pre><code>str 转换成 bytes：

&gt;&gt;&gt; 'ABC'.encode('ascii')
b'ABC'     # 3个字节
&gt;&gt;&gt; '中文'.encode('utf-8')
b'\xe4\xb8\xad\xe6\x96\x87'  # 6个字节


# 1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。


bytes 转换成 str：

&gt;&gt;&gt; b'ABC'.decode('ascii')
'ABC'
&gt;&gt;&gt; b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
'中文

#  在bytes中，无法显示为ASCII字符的字节，用\x##显示 （\x## 是一个字节）

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最小的Flask Web应用]]></title>
        <id>https://aturx.github.io/post/zui-xiao-de-flask-web-ying-yong</id>
        <link href="https://aturx.github.io/post/zui-xiao-de-flask-web-ying-yong">
        </link>
        <updated>2020-05-09T07:09:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装-flask">安装 Flask</h1>
<pre><code>pip3 install flask

或者

pipenv install flask

或者 [PyPI 网站](https://pypi.org/project/Flask/#files)下载源码包安装：

pip3 install Flask-1.1.2-py2.py3-none-any.whl 
</code></pre>
<h1 id="编写代码">编写代码</h1>
<pre><code>from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, World!'

# 运行
app.run()
</code></pre>
<p>一些常用的配置：</p>
<ol>
<li>端口设定</li>
</ol>
<pre><code>app.run(port=&quot;5001&quot;)
</code></pre>
<ol start="2">
<li>Debug 模式开启</li>
</ol>
<pre><code>app.run(port=&quot;5001&quot;, debug=True)
</code></pre>
<ol start="3">
<li>静态资源路径配置</li>
</ol>
<pre><code># 默认不设置则为当前路径下 template 和 static
app = Flask(__name__,template_folder=&quot;F:\\templates&quot;, static_folder=&quot;F:\\static&quot;)


</code></pre>
<ol start="4">
<li>所有IP可以访问(否则只能本机访问)</li>
</ol>
<pre><code>app.run(port=&quot;5001&quot;, debug=True, host=&quot;0.0.0.0&quot;)
</code></pre>
<h1 id="参考内容">参考内容</h1>
<p><a href="http://docs.jinkan.org/docs/flask/">Flask文档</a></p>
<p><a href="https://www.w3cschool.cn/flask/flask_deployment.html">Flask教程</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Works Show - 作品集]]></title>
        <id>https://aturx.github.io/post/works-show-zuo-pin-ji-ye-mian</id>
        <link href="https://aturx.github.io/post/works-show-zuo-pin-ji-ye-mian">
        </link>
        <updated>2020-05-08T02:57:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="️-预览">❤️ 预览</h1>
<p>😎<a href="https://susuwataricoder.github.io/">在线地址</a></p>
<hr>
<h1 id="项目功能">✅ 项目功能</h1>
<p>完成一个作品集页面，一些练习代码，功能页面的展示。<br>
该页面是完成了FreeCodeCamp 中的一个项目练习。</p>
<hr>
<h1 id="️-使用技术">♻️ 使用技术</h1>
<p>HTML / CSS</p>
<p>部署在GitHub上的静态页面</p>
<hr>
<h1 id="参考资料">➿  参考资料</h1>
<p><a href="https://learn.freecodecamp.one/">FreeCodeCamp</a></p>
<p><a href="https://github.com/SusuwatariCoder">参考仓库</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python的多进程使用]]></title>
        <id>https://aturx.github.io/post/python-de-duo-jin-cheng-shi-yong</id>
        <link href="https://aturx.github.io/post/python-de-duo-jin-cheng-shi-yong">
        </link>
        <updated>2020-04-23T07:39:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="multiprocessing-模块">multiprocessing 模块</h1>
<p>multiprocessing模块就是跨平台版本的多进程模块</p>
<p>multiprocessing模块提供了一个Process类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束：</p>
<pre><code>import hashlib
from time import sleep

# TODO  多进程
from multiprocessing import Process
import os
# 演示函数 1 ： 工作量证明
def proof_fo_work():
	&quot;&quot;&quot;
	简单的工作量证明:
         - 查找一个 p' 使得 hash(pp') 以4个0开头
         - p 是上一个块的证明,  p' 是当前的证明
        :param last_proof: &lt;int&gt;
        :return: &lt;int&gt;
	:return:
	&quot;&quot;&quot;
	originHash = hashlib.sha256(&quot;lsy&quot;.encode()).hexdigest()
	print(&quot;Origin Hash：&quot;, originHash)
	proof = 0
	hard = &quot;0&quot;
	while True:
		guessStr = f&quot;{originHash}{proof}&quot;.encode()
		guessHash = hashlib.sha256(guessStr).hexdigest()
		if guessHash[:1] == hard:
			print(&quot;***符合要求***: &quot;, guessHash)
			print(&quot;***Proof***: &quot;, proof)
			sleep(6)
			hard = hard + &quot;0&quot;
		else:
			print(guessHash)
			proof = proof + 1

# 演示函数 2 ： 打印
def t(name):
	print(f&quot;子进程： {name}, {os.getpid()}&quot;)

# 进程的使用： 启动进程分别执行 函数1,2
def use_process():
	print(f&quot;主进程: {os.getpid()}&quot;)
	# 创建test进程
	p = Process(target=t, args=('testProcess',))
	# 创建proof_fo_work 进程
	p2 = Process(target=proof_fo_work)
	p2.start()
	#p2.join()   # 使用之后，p进程将等待p2结束才执行
	print(&quot;启动测试进程&quot;)
	p.start()


</code></pre>
<p>其中 <code>p.join()</code> 表示进程结束后，才会继续执行后续过程。如果该经常死循环了，那么后面的执行步骤将永远不会执行。</p>
<h2 id="创建多个进程-进程池-pool">创建多个进程： 进程池 Pool</h2>
<p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</p>
<pre><code>def t(name):
	sleep(1)
	print(f&quot;子进程： {name}, {os.getpid()}&quot;)
	
# 进程池的使用
def pool_process():
	from multiprocessing import Pool
	#如果要启动大量的子进程，可以用进程池的方式批量创建子进程：
	p = Pool(4)  # 4为 CPU 核心数， 四核CPU 最多执行4 ， 大于4 也只执行4个进程
	for i in range(5):
		p.apply_async(t, args=(i,))
	print(&quot;完成全部进程的创建启动&quot;)
	p.close()
	p.join()
</code></pre>
<h2 id="进程通信-生产者消费者queue">进程通信： 生产者+消费者+Queue</h2>
<pre><code># 进程的通信： 多线程 生成者+消费者 Queue 实现
def message_process():
	from multiprocessing import Queue

	q = Queue()

	pw = Process(target=producer, args=(q,))   # 生产进程
	pr = Process(target=consumer, args=(q, &quot;P1&quot;))   # 消费进程 1
	pr2 = Process(target=consumer, args=(q, &quot;P2&quot;))  # 消费进程 2
	pr3 = Process(target=consumer, args=(q, &quot;P3&quot;))  # 消费进程 3
	pr4 = Process(target=consumer, args=(q, &quot;P4&quot;))  # 消费进程 4
	pr5 = Process(target=consumer, args=(q, &quot;P5&quot;))  # 消费进程 5

	pw.start()
	pr.start()
	pr2.start()
	pr3.start()
	pr4.start()
	pr5.start()

	# 等待pw结束:
	pw.join()
	# 队列消费完成 结束进程
	while True:
		if q.qsize() == 0:
			# pr,pr2进程里是死循环，无法等待其结束，只能强行终止:
			pr.terminate()
			pr2.terminate()
			pr3.terminate()
			pr4.terminate()
			pr5.terminate()
			print(&quot;队列数据： &quot;, q.qsize())
			break

 
# 往队列里生产数据
def producer(q):
	import random, time
	print('Hash生成进程: %s' % os.getpid())
	# 生产 100个
	for i in range(100):
		num = random.randint(0, 1000)
		value_hash = hashlib.sha256(str(num).encode()).hexdigest()
		print('生成地址：[ %s ] to queue...' % value_hash)
		q.put(value_hash)  # 数据写入队列


# 消费队列里的数据
def consumer(q,name):
	import random, time
	print('获取地址消费: %s ' % os.getpid())
	while True:
		value = q.get(True)
		print(f'**{name}-读取地址: [ {value} ] from queue.')
		time.sleep(random.random())

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker实践01 -- 图形管理工具Portainer的使用]]></title>
        <id>https://aturx.github.io/post/docker-shi-jian-01-tu-xing-guan-li-gong-ju-portainer-de-shi-yong</id>
        <link href="https://aturx.github.io/post/docker-shi-jian-01-tu-xing-guan-li-gong-ju-portainer-de-shi-yong">
        </link>
        <updated>2020-03-06T08:52:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-解决问题">一、 解决问题？</h1>
<p>Docker 在使用过程中，要在命令行中查看各种信息，非常的不方便，而且管理的效率不高，采用Portainer用来管理Docker和运行的项目足够了。</p>
<h1 id="二-安装并运行-portainer">二、安装并运行 Portainer</h1>
<p>Portainer 不用特意去安装，直接用Docker一行命令去运行就可以了。</p>
<h2 id="dockerhub">DockerHub</h2>
<p><a href="https://hub.docker.com/r/portainer/portainer">DockerHub</a> 上有很多镜像包可以直接使用，也包括Portainer的镜像。</p>
<p>执行命令，先把镜像获取到本地：</p>
<pre><code>docker pull portainer/portainer
</code></pre>
<p>运行 Portainer：</p>
<pre><code>
$ docker volume create portainer_data

//创建一个portainer_data文件夹存储你容器的相关数据
//一般它的地址是在： /var/lib/docker/volumes

$ docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer


//其他参数暂时不用修改，就按照官方命令进行启动就可以了

</code></pre>
<h1 id="三-在线演示">三、在线演示</h1>
<p>你可以在线查看效果</p>
<p>访问地址:  http://demo.portainer.io/</p>
<p>用户名：<code>admin</code><br>
密码  ：<code>tryportainer</code></p>
<h1 id="参考">参考</h1>
<p><a href="https://portainer.readthedocs.io/en/latest/deployment.html">更多部署信息</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网站流量统计功能添加]]></title>
        <id>https://aturx.github.io/post/wang-zhan-liu-liang-tong-ji-gong-neng-tian-jia</id>
        <link href="https://aturx.github.io/post/wang-zhan-liu-liang-tong-ji-gong-neng-tian-jia">
        </link>
        <updated>2020-03-04T06:26:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-站长统计的选择">😁一、站长统计的选择</h1>
<p>想要查看网站的访问量，可以给网站进行网站统计。先对网站统计的工具选择：因为网站是国内访问，选择百度统计比较合适。</p>
<p>访问地址：<a href="https://tongji.baidu.com">百度流量统计</a></p>
<p>还有另一个，网站直接统计的js脚本也可以使用，需要添加到网页中，好处是可以显示用户访问量在页面。</p>
<p>访问地址： <a href="https://busuanzi.ibruce.info/">不蒜子访问量展示</a></p>
<h1 id="二-添加网站统计">😁二、添加网站统计</h1>
<h2 id="百度统计方式">百度统计方式</h2>
<p>基本过程是：</p>
<ol>
<li>
<p>首页注册登录</p>
</li>
<li>
<p>添加自己的网站域名</p>
</li>
<li>
<p>复制生成好的js代码片段</p>
</li>
<li>
<p>将代码添加到自己的网站页面中</p>
</li>
<li>
<p>20分钟后可查看页面的流量统计</p>
</li>
</ol>
<p>web4web.top 统计代码添加 :</p>
<pre><code>&lt;script&gt;
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement(&quot;script&quot;);
  hm.src = &quot;https://hm.baidu.com/hm.js?13ea7e585ad4fa34100390e5a6862c52&quot;;
  var s = document.getElementsByTagName(&quot;script&quot;)[0]; 
  s.parentNode.insertBefore(hm, s);
})();
&lt;/script&gt;

</code></pre>
<p>lisiyi.top 统计代码添加 ：</p>
<pre><code>&lt;script&gt;
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement(&quot;script&quot;);
  hm.src = &quot;https://hm.baidu.com/hm.js?5f536360cba2bd2691929ab1dfc08c55&quot;;
  var s = document.getElementsByTagName(&quot;script&quot;)[0]; 
  s.parentNode.insertBefore(hm, s);
})();
&lt;/script&gt;
</code></pre>
<h2 id="不蒜子方式">不蒜子方式</h2>
<p>参考：<br>
<a href="https://liam.page/2017/04/29/busuanzi-offset-setting/">数值初始化</a></p>
<p>不蒜子 参考代码片段：</p>
<pre><code>  &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;
&lt;span id=&quot;busuanzi_container_site_uv&quot; style='display:none'&gt;
本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt;| 
    Powered by &lt;a href=&quot;https://github.com/aturX&quot; target=&quot;_blank&quot;&gt;AturX&lt;/a&gt; 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Maven 的基础知识]]></title>
        <id>https://aturx.github.io/post/maven-de-ji-chu-zhi-shi</id>
        <link href="https://aturx.github.io/post/maven-de-ji-chu-zhi-shi">
        </link>
        <updated>2020-03-04T04:54:47.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="maven-基-本-操-作">🐶 Maven 基 本 操 作</h1>
]]></summary>
        <content type="html"><![CDATA[<h1 id="maven-基-本-操-作">🐶 Maven 基 本 操 作</h1>
<!-- more -->
<h2 id="构建">构建</h2>
<p>要构建一个基于Maven的项目，打开控制台，进入到 pom.xml 文件所放的项目文件夹，并发出以下命令：</p>
<pre><code>mvn package
</code></pre>
<!-- more -->
<h2 id="清除">清除</h2>
<p>在基于Maven的项目中，很多缓存输出在“target”文件夹中。如果想建立项目部署，必须确保清理所有缓存的输出，从面能够随时获得最新的部署。</p>
<pre><code>mvn clean
</code></pre>
<p>要部署您的项目进行生产，它总是建议使用 “mvn clean package“, 以确保始终获得最新的部署。</p>
<!-- more -->
<h2 id="单元测试">单元测试</h2>
<p>要通过Maven运行单元测试，发出此命令：</p>
<pre><code>mvn test
</code></pre>
<p>这会在你的项目中运行整个单元测试。</p>
<!-- more -->
<h2 id="安装">安装</h2>
<p>在Maven中，可以使用“mvn install”打包项目，并自动部署到本地资源库，让其他开发人员使用它。</p>
<pre><code>mvn install
</code></pre>
<p>注意，<br>
当“install”在执行阶段，上述所有阶段 “validate“, “compile“, “test“, “package“, “integration-test“, “verify” 阶段, 包括目前的“install”阶段将被执行有序。</p>
<!-- more -->
<h1 id="maven-的-pom-文-件">🦊 Maven 的 POM 文 件</h1>
<h3 id="maven-项目唯一标识标签">Maven - 项目唯一标识标签：</h3>
<ul>
<li>
<p>groupId：项目或者组织的唯一标志 ，如cn.gov.customs生成的相对路径为：/cn/gov/customs</p>
</li>
<li>
<p>artifactId：项目的通用名称</p>
</li>
<li>
<p>version：项目的版本</p>
</li>
<li>
<p>packaging：打包机制，如pom,jar,maven-plugin,ejb,war,ear,rar,par</p>
</li>
<li>
<p>name：用户描述项目的名称，无关紧要的东西，非必要</p>
</li>
<li>
<p>url：开发团队官方地址 ，非必要</p>
</li>
<li>
<p>classifer：分类</p>
</li>
</ul>
<p><code>groupId,artifactId,version,packaging</code>作为项目唯一标识</p>
<p>例子：</p>
<pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
   xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0
   http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
   
   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
   // 1. groupId 这是项目组的编号，这在组织或项目中通常是独一无二的。
   // 例如:com.company.bank 某公司银行相关项目

   &lt;groupId&gt;com.baidu.project-group&lt;/groupId&gt;
   
   // 2.项目ID。这通常是项目的名称。例如，springboot-demo。 
   &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt;
   
   // 3. 版本号与groupId 结合使用
   &lt;version&gt;1.0&lt;/version&gt;
   // 4. 打包类型 
   &lt;packaging&gt;jar&lt;/packaging&gt;
   
   &lt;name&gt;springboot-demo&lt;/name&gt;
&lt;project&gt; 

</code></pre>
<!-- more -->
<h3 id="maven-依赖关系">Maven - 依赖关系：</h3>
<p>POM文件中的关系，主要有依赖，继承，合成等关系。</p>
<ul>
<li>
<p>scope：用来指定当前包的依赖范围</p>
</li>
<li>
<p>optional：设置指依赖是否可选，默认为false,即子项目默认都继承，为true,则子项目必需显示的引入，与dependencyManagement里定义的依赖类似</p>
</li>
<li>
<p>exclusions：如果X需要A,A包含B依赖，那么X可以声明不要B依赖，只要在exclusions中声明exclusion</p>
</li>
<li>
<p>parent：如果一个工程作为父类工程，那就必须添加pom,子系统要继承父类，也必须使用parent标签。对于子系统使用如下所示：</p>
</li>
<li>
<p>relativePath：为可选项，maven会首先搜索该地址，然后再搜索远程仓库。</p>
</li>
</ul>
<pre><code>&lt;parent&gt; 
    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt; 
    &lt;artifactId&gt;my-parent&lt;/artifactId&gt; 
    &lt;version&gt;2.0&lt;/version&gt; 
    &lt;relativePath&gt;../my-parent&lt;/relativePath&gt; 
&lt;/parent&gt;
</code></pre>
<p>依赖引入：</p>
<pre><code>说明：properties 顾名思义就是配置文件，这里的 peoperties 是管理 jar 包的版本号的， 然后在后面的 dependencies 中 可以以 变量的形式调用 如： 
&lt;properties&gt;
 &lt;!-- 框架版本 --&gt;
	&lt;org.springframework.version&gt;3.2.4.RELEASE&lt;/org.springframework.version&gt;
 &lt;!-- Java版本 --&gt;
   &lt;java.version&gt;1.8&lt;/java.version&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
    	&lt;groupId&gt;org.springframework&lt;/groupId&gt;
    	&lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
    	&lt;version&gt;${org.springframework.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<ul>
<li>modules：多模块项目的标签，顺序不重要，MAVEN会自动拓展排序。使用如下所示：</li>
</ul>
<pre><code>&lt;!--子模块--&gt;
&lt;modules&gt;
    &lt;module&gt;ygb-service-config&lt;/module&gt;
    &lt;module&gt;ygb-service-bus&lt;/module&gt;
    &lt;module&gt;ygb-service-policy-center&lt;/module&gt;
    &lt;module&gt;ygb-service-letter-of-indemnity&lt;/module&gt;
    &lt;module&gt;ygb-service-authentication-center&lt;/module&gt;
&lt;/modules&gt;
</code></pre>
<!-- more -->
<h3 id="maven-构建设置">Maven - 构建设置:</h3>
<ul>
<li>build 这部分主要是对项目的构建过程进行配置，包括打包的方式、插件的安装等。配置如下所示：</li>
</ul>
<pre><code>&lt;!-- 构建管理 --&gt;
&lt;build&gt;
    &lt;!--构建工具插件管理--&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p>常用POM 文件：</p>
<pre><code>完整 POM 参考：
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;2.1.4.RELEASE&lt;/version&gt;
		&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
	&lt;/parent&gt;
  &lt;groupId&gt;cn.seisys.kafka&lt;/groupId&gt;
  &lt;artifactId&gt;kafka-demo&lt;/artifactId&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
	&lt;name&gt;kafka-demo&lt;/name&gt;

  &lt;properties&gt;
   &lt;java.version&gt;1.8&lt;/java.version&gt;
  &lt;/properties&gt;

  &lt;dependencies&gt;

	  &lt;dependency&gt;
		  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
	  &lt;/dependency&gt;

	  &lt;dependency&gt;
		  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
		  &lt;artifactId&gt;lombok&lt;/artifactId&gt;
		  &lt;optional&gt;true&lt;/optional&gt;
	  &lt;/dependency&gt;
	  &lt;dependency&gt;
		  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		  &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
		  &lt;scope&gt;test&lt;/scope&gt;
	  &lt;/dependency&gt;


	  &lt;dependency&gt;
		  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
		  &lt;artifactId&gt;lombok&lt;/artifactId&gt;
		  &lt;optional&gt;true&lt;/optional&gt;
	  &lt;/dependency&gt;
	  &lt;!--引入第三方jar-Mas jar--&gt;
	  &lt;dependency&gt;
		  &lt;groupId&gt;org.apache.kafka.clients&lt;/groupId&gt;
		  &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;
		  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
		  &lt;scope&gt;system&lt;/scope&gt;
		  &lt;systemPath&gt;${project.basedir}/src/main/resources/lib/kafka-clients-0.11.0.1.jar&lt;/systemPath&gt;
	  &lt;/dependency&gt;

	  &lt;dependency&gt;
		  &lt;groupId&gt;org.apache.kafka.clients&lt;/groupId&gt;
		  &lt;artifactId&gt;kafka&lt;/artifactId&gt;
		  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
		  &lt;scope&gt;system&lt;/scope&gt;
		  &lt;systemPath&gt;${project.basedir}/src/main/resources/lib/kafka_2.11-0.11.0.1.jar&lt;/systemPath&gt;
	  &lt;/dependency&gt;

	  &lt;!-- https://mvnrepository.com/artifact/commons-net/commons-net --&gt;
	  &lt;dependency&gt;
		  &lt;groupId&gt;commons-net&lt;/groupId&gt;
		  &lt;artifactId&gt;commons-net&lt;/artifactId&gt;
		  &lt;version&gt;3.6&lt;/version&gt;
	  &lt;/dependency&gt;
	  &lt;dependency&gt;
		  &lt;groupId&gt;commons-io&lt;/groupId&gt;
		  &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
		  &lt;version&gt;1.3.1&lt;/version&gt;
	  &lt;/dependency&gt;
	  &lt;dependency&gt;
		  &lt;groupId&gt;cn.hutool&lt;/groupId&gt;
		  &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;
		  &lt;version&gt;4.5.7&lt;/version&gt;
	  &lt;/dependency&gt;
	  &lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;
	  &lt;dependency&gt;
		  &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
		  &lt;artifactId&gt;gson&lt;/artifactId&gt;
		  &lt;version&gt;2.8.5&lt;/version&gt;
	  &lt;/dependency&gt;


	  &lt;dependency&gt;
		  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
		  &lt;artifactId&gt;druid&lt;/artifactId&gt;
		  &lt;version&gt;1.0.10&lt;/version&gt;
	  &lt;/dependency&gt;

	  &lt;dependency&gt;
		  &lt;groupId&gt;com.oracle&lt;/groupId&gt;
		  &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt;
		  &lt;version&gt;11.2.0&lt;/version&gt;
	  &lt;/dependency&gt;

	  &lt;dependency&gt;
		  &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
		  &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
		  &lt;version&gt;2.0.0&lt;/version&gt;
	  &lt;/dependency&gt;

  &lt;/dependencies&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
				&lt;configuration&gt;
					&lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;


&lt;/project&gt;

</code></pre>
<!-- more -->
<h1 id="参-考-资-料">🐼 参 考 资 料</h1>
<p><a href="https://www.yiibai.com/maven">Maven教程</a></p>
<p><a href="https://www.jianshu.com/p/242f2349eef1">POM配置标签</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[区块链周刊 - 第 2 期]]></title>
        <id>https://aturx.github.io/post/qu-kuai-lian-zhou-kan-di-2-qi</id>
        <link href="https://aturx.github.io/post/qu-kuai-lian-zhou-kan-di-2-qi">
        </link>
        <updated>2020-03-01T02:03:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是加密货币">😎 什么是加密货币？</h1>
<p>加密货币是一种通过加密技术保护的数字或虚拟货币，几乎不可能伪造或重复消费。许多加密货币基于区块链技术的分布式网络-即由不同的计算机网络构成的分布式账本。加密货币的特征是它们通常不是由任何中央机构发行的，因此从理论上讲其不受政府干预或操纵。</p>
<pre><code>重要要点:

1. 加密货币是一种基于网络的新型数字资产，该网络分布在大量计算机上。

2. 这种分散的结构使它们能够存在于政府和中央政府的控制之外。

3. “加密货币”一词源自用于保护网络的加密技术。
区块链是确保交易数据完整性的方法，是许多加密货币的重要组成部分。
</code></pre>
<p><strong>许多专家认为，区块链及相关技术将重塑许多行业，包括金融和法律。</strong></p>
<p>加密货币由于多种原因而受到批评，包括其用于非法活动，汇率波动以及其基础设施的脆弱性。但是，它们的便携性，可分割性，抗通胀性和透明性也受到赞誉。</p>
<h2 id="了解加密货币">了解加密货币</h2>
<p>加密货币是允许以虚拟“令牌（Token）”命名的在线安全支付的系统，虚拟“令牌（Token）”由系统内部的分类帐条目表示。“加密”是指保护这些条目的各种加密算法和加密技术，例如椭圆曲线加密，公私钥对和哈希函数。</p>
<h2 id="加密货币的类型">加密货币的类型</h2>
<p>第一个基于区块链的加密货币是比特币，它仍然是最受欢迎和最有价值的。如今，有成千上万种具有各种功能和规格的备用加密货币。其中一些是比特币的克隆或分叉，而另一些则是从头开始构建的新货币。</p>
<p>比特币由化名“中本聪”的个人或组织于2009年推出。截至2019年11月，流通中的比特币超过1800万枚，总市值约为1,460亿美元。</p>
<p>比特币的成功催生了一些竞争性的加密货币，称为“山寨币”，包括Litecoin，Peercoin和Namecoin以及以太坊，Cardano和EOS。如今，现有所有加密货币的总价值约为2140亿美元，比特币目前占总价值的68％以上。</p>
<p>今天，加密货币中使用的某些加密技术最初是为军事应用开发的。一方面，政府希望对密码术进行控制，类似像武器一样进行法律限制，但是出于言论自由的目的，最终确保了平民使用密码术的权利。</p>
<h2 id="特别注意事项">特别注意事项</h2>
<p>比特币和其他加密货币独具吸引力的核心功能是区块链技术，该技术用于保持曾经进行过的所有交易的安全不可篡改性，从而为该账本提供了一个非常安全的数据结构，并且可以通过共享并达成共识。由单个节点广播至整个网络。生成的每个新块都必须在确认之前被每个节点进行验证，这几乎不可能伪造交易历史记录。</p>
<p>许多专家认为，区块链技术在<strong>在线投票</strong>和<strong>众筹</strong>等应用中具有巨大潜力，而摩根大通（JPM）等主要金融机构则认为，其拥有通过<strong>简化付款流程来降低交易成本的潜力</strong>。 但是，由于加密货币是虚拟的并且没有存储在中央数据库中，因此，如果私钥没有备份副本，并且存储私钥的硬盘丢失或破坏，则所有的数字加密货币将丢失。但是，这样也保证了没有中央机构，政府或公司可以访问您的资金或个人信息。</p>
<h2 id="加密货币的优缺点">加密货币的优缺点</h2>
<h3 id="优点">优点</h3>
<p>加密货币有望使交易双方转移资金变得更加容易，而无需像银行或信用卡公司这样的受信任的第三方。相反，这些转移是通过使用公钥和私钥以及不同形式的激励系统（例如工作量证明或权益证明）来确保的。</p>
<p>在现代的加密货币系统中，用户的“钱包”或帐户地址具有公共密钥，而私钥仅是所有者已知的，并用于签署交易。资金转帐以最低的手续费完成，使用户可以避免银行和金融机构为电汇收取的高额费用。</p>
<h3 id="缺点">缺点</h3>
<p>加密货币交易的半匿名性质使其非常适合于许多非法活动，例如洗钱和逃税。但是，加密货币的倡导者经常高度重视其匿名性，理由是隐私的好处，例如保护生活在压制政府下的举报者或激进主义者。一些加密货币比其他加密货币更具私密性。</p>
<p>例如，由于对比特币区块链进行分析有助于当局逮捕和起诉罪犯，因此，比特币在网上开展非法业务是相对较差的选择。但是，确实存在更多面向隐私的硬币，例如Dash，Monero或ZCash，它们很难追踪。</p>
<h2 id="对加密货币的批评">对加密货币的批评</h2>
<p>由于加密货币的市场价格基于供求关系，因此加密货币可兑换为另一种货币的汇率可能会大幅波动，因为许多加密货币的设计可确保高度的稀缺性。</p>
<p>比特币经历了一些快速的飙升和价值崩溃，在2017年12月攀升至每比特币19,000美元，随后在接下来的几个月中跌至7,000美元左右。 因此，一些经济学家认为加密货币是昙花一现或投机泡沫。</p>
<p>加密货币区块链是高度安全的，但是加密货币生态系统的其他方面，包括交易所和钱包，是无法幸免于黑客攻击的。在比特币发展的10年历史中，数个在线交易所一直是黑客和盗窃的重点对象，有时会盗窃价值数百万美元的“硬币”。</p>
<p>尽管如此，许多观察家仍认为加密货币具有潜在的优势，例如可以保持价值抵御通货膨胀并促进交换，同时比贵金属更容易运输和分割，并且不受中央银行和政府的影响而存在。</p>
]]></content>
    </entry>
</feed>